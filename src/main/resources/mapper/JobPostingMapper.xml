<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.career.careerlink.job.mapper.JobPostingMapper">

    <sql id="OrderByClause">
        ORDER BY
        <choose>
            <when test="sort == 'title'">                jp.title</when>
            <when test="sort == 'companyName'">          em.company_name</when>
            <when test="sort == 'employerId'">           jp.employer_id</when>
            <when test="sort == 'applicationDeadline'">  jp.application_deadline</when>
            <when test="sort == 'isActive'">             jp.is_active</when>
            <when test="sort == 'createdAt'">            jp.created_at</when>
            <when test="sort == 'createdBy'">            jp.created_by</when>
            <when test="sort == 'isDeleted'">            jp.is_deleted</when>
            <otherwise>                                  jp.job_posting_id</otherwise>
        </choose>
        <choose>
            <when test="direction == 'ASC'">ASC</when>
            <otherwise>DESC</otherwise>
        </choose>
    </sql>

    <!-- 조회 컬럼 목록 -->
    <sql id="BaseColumns">
        jp.job_posting_id       AS jobPostingId,
        jp.title                AS title,
        jp.employer_id          AS employerId,
        em.company_name         AS companyName,
        jp.application_deadline AS applicationDeadline,
        jp.is_active            AS isActive,
        jp.created_at           AS createdAt,
        jp.updated_at           AS updatedAt,
        jp.is_deleted           AS isDeleted,
        jp.created_by           AS createdByRaw,
        jp.updated_by           AS updatedByRaw,

        CASE
          WHEN jp.created_by LIKE 'ADMIN%' THEN '관리자'
          WHEN jp.created_by LIKE 'EMU%'   THEN CONCAT(euc.user_name, ' (', euc.employer_login_id, ')')
          WHEN jp.created_by IS NULL OR jp.created_by = '' THEN '-'
          ELSE jp.created_by
        END AS createdBy,

        CASE
          WHEN jp.updated_by LIKE 'ADMIN%' THEN '관리자'
          WHEN jp.updated_by LIKE 'EMU%'   THEN CONCAT(euu.user_name, ' (', euu.employer_login_id, ')')
          WHEN jp.updated_by IS NULL OR jp.updated_by = '' THEN '-'
          ELSE jp.updated_by
        END AS updatedBy
    </sql>

    <!-- 생성자/수정자 표시를 위한 조인 -->
    <sql id="DisplayNameJoins">
        LEFT JOIN employer_users euc
               ON jp.created_by LIKE 'EMU%'
              AND euc.employer_user_id = jp.created_by
              AND euc.employer_id      = jp.employer_id
        LEFT JOIN employer_users euu
               ON jp.updated_by LIKE 'EMU%'
              AND euu.employer_user_id = jp.updated_by
              AND euu.employer_id      = jp.employer_id
    </sql>

    <sql id="EmployerJoin">
        LEFT JOIN employers em
           ON em.employer_id = jp.employer_id
    </sql>

    <select id="searchForEmployer" resultType="com.career.careerlink.employers.jobPosting.dto.EmployerJobPostingResponse">
        SELECT
        <include refid="BaseColumns"/>
        FROM job_postings jp
        JOIN employer_users me
        ON me.employer_user_id = #{employerUserId}
        AND me.employer_id      = jp.employer_id
        AND me.is_approved      = 'Y'       <!-- 승인된 사용자만 가능 -->

        <include refid="EmployerJoin"/>
        <include refid="DisplayNameJoins"/>

        <where>
            AND jp.is_deleted = 'N'

            <if test="req.keyword != null and req.keyword != ''">
                AND (
                jp.title LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')  <!-- 생성자(명/로그인아이디) -->
                OR euu.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')  <!-- 수정자(명/로그인아이디) -->
                OR DATE_FORMAT(jp.application_deadline, '%Y%m%d') LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
        <include refid="OrderByClause"/>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="searchForEmployerCount" resultType="long">
        SELECT COUNT(*)
        FROM job_postings jp
        JOIN employer_users me
        ON me.employer_user_id = #{employerUserId}
        AND me.employer_id      = jp.employer_id
        AND me.is_approved      = 'Y'
        <include refid="EmployerJoin"/>
        <include refid="DisplayNameJoins"/>
        <where>
            AND jp.is_deleted = 'N'
            <if test="req.keyword != null and req.keyword != ''">
                AND (
                jp.title LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR DATE_FORMAT(jp.application_deadline, '%Y%m%d') LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
    </select>

    <update id="deleteBulkByEmployer">
        UPDATE job_postings jp
        JOIN employer_users me
        ON me.employer_user_id = #{employerUserId}
        AND me.employer_id      = jp.employer_id
        AND me.is_approved      = 'Y'
        SET jp.is_deleted = 'Y',
        jp.updated_at = CURRENT_TIMESTAMP,
        jp.updated_by = #{employerUserId}
        WHERE jp.is_deleted = 'N'
        AND jp.job_posting_id IN
        <foreach collection="targetJobPostingIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="searchForAdmin" resultType="com.career.careerlink.admin.jobPosting.dto.AdminJobPostingResponse">
        SELECT
        <include refid="BaseColumns"/>
        FROM job_postings jp

        <include refid="EmployerJoin"/>
        <include refid="DisplayNameJoins"/>

        <where>
            <if test="req.keyword != null and req.keyword != ''">
                AND (
                jp.title LIKE CONCAT('%', #{req.keyword}, '%')
                OR em.company_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR jp.employer_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR jp.created_by LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR DATE_FORMAT(jp.application_deadline, '%Y%m%d') LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
        <include refid="OrderByClause"/>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="searchForAdminCount" resultType="long">
        SELECT COUNT(*)
        FROM job_postings jp
        <include refid="EmployerJoin"/>
        <include refid="DisplayNameJoins"/>
        <where>
            <if test="req.keyword != null and req.keyword != ''">
                AND (
                jp.title LIKE CONCAT('%', #{req.keyword}, '%')
                OR em.company_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR jp.employer_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR jp.created_by LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euc.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR euu.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR DATE_FORMAT(jp.application_deadline, '%Y%m%d') LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
    </select>

    <update id="deleteBulkByAdmin">
        UPDATE job_postings
        SET is_deleted = 'Y',
        updated_at = CURRENT_TIMESTAMP,
        updated_by = 'ADMIN_SYSTEM'
        WHERE is_deleted = 'N'
        AND job_posting_id IN
        <foreach collection="targetJobPostingIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>


    <select id="selectHotJobs" resultType="map">
        SELECT
        h.job_posting_id AS jobId,
        h.title AS title,
        e.company_name AS companyName,
        e.company_logo_url AS companyLogoUrl,

        COALESCE(jfc.code_name,  h.job_field_code)         AS jobFiled,
        COALESCE(loc.code_name,  h.location_code)          AS location,
        COALESCE(emt.code_name,  h.employment_type_code)   AS employmentType,
        COALESCE(car.code_name,  h.career_level_code)      AS experience,
        COALESCE(edu.code_name,  h.education_level_code)   AS education,
        COALESCE(sal.code_name,  h.salary_code)            AS salary,

        h.application_deadline AS deadline,
        h.view_count AS viewCount
        FROM (
        SELECT
            jp.job_posting_id,
            jp.employer_id,
            jp.title,
            jp.job_field_code,
            jp.location_code,
            jp.employment_type_code,
            jp.education_level_code,
            jp.career_level_code,
            jp.salary_code,
            jp.application_deadline,
            jp.view_count
        FROM job_postings jp
        WHERE jp.is_active = 'Y'
            AND jp.is_deleted = 'N'
        ORDER BY jp.view_count DESC, jp.job_posting_id DESC
        LIMIT 100
        ) h
        JOIN employers e ON e.employer_id = h.employer_id

        LEFT JOIN common_codes jfc
        ON jfc.group_code = 'JOB_FIELD'
        AND jfc.code       = h.job_field_code
        LEFT JOIN common_codes loc
        ON loc.group_code = 'LOCATION'
        AND loc.code       = h.location_code
        LEFT JOIN common_codes emt
        ON emt.group_code = 'EMPLOYMENT_TYPE'
        AND emt.code       = h.employment_type_code
        LEFT JOIN common_codes edu
        ON edu.group_code = 'EDUCATION_LEVEL'
        AND edu.code       = h.education_level_code
        LEFT JOIN common_codes car
        ON car.group_code = 'CAREER_LEVEL'
        AND car.code       = h.career_level_code
        LEFT JOIN common_codes sal
        ON sal.group_code = 'SALARY'
        AND sal.code       = h.salary_code
        <!-- Keyset 커서 조건 -->
        <if test="cursorViewCount != null and cursorId != null">
        WHERE
            (
            h.view_count &lt; #{cursorViewCount}
            OR (h.view_count = #{cursorViewCount} AND h.job_posting_id &lt; #{cursorId})
            )
        </if>

        ORDER BY h.view_count DESC, h.job_posting_id DESC
        LIMIT #{limit}
    </select>
</mapper>
