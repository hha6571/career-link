<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.career.careerlink.employers.mapper.EmployerMemberMapper">
    <sql id="OrderByClause">
        ORDER BY
        <choose>
            <when test="sort == 'userName'">        eu.user_name</when>
            <when test="sort == 'employerLoginId'"> eu.employer_login_id</when>
            <when test="sort == 'email'">           eu.email</when>
            <when test="sort == 'phoneNumber'">     eu.phone_number</when>
            <when test="sort == 'isApproved'">      eu.is_approved</when>
            <when test="sort == 'joinedAt'">        eu.joined_at</when>
            <otherwise>                             eu.employer_user_id</otherwise>
        </choose>
        <choose>
            <when test="direction == 'ASC'">ASC</when>
            <otherwise>DESC</otherwise>
        </choose>
    </sql>

    <sql id="BaseSelect">
        SELECT
        eu.employer_user_id    AS employerUserId,
        eu.employer_id         AS employerId,
        eu.user_name           AS userName,
        eu.employer_login_id   AS employerLoginId,
        eu.email               AS email,
        eu.phone_number        AS phoneNumber,
        eu.is_approved         AS isApproved,
        eu.approved_at         AS approved_at
        FROM employer_users eu
        <where>
            /*본인소속 기업조회*/
            EXISTS (
            SELECT 1
            FROM employer_users me
            WHERE me.employer_user_id = #{employerUserId}  <!-- 토큰의 EMU... -->
            AND me.employer_id      = eu.employer_id     <!-- 같은 회사만 노출 -->
            )

            <if test="req.keyword != null and req.keyword != ''">
                AND
                (
                eu.user_name LIKE CONCAT('%', #{req.keyword}, '%')
                OR eu.employer_login_id LIKE CONCAT('%', #{req.keyword}, '%')
                OR eu.email LIKE CONCAT('%', #{req.keyword}, '%')
                OR eu.phone_number LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <select id="membersCount" resultType="long" parameterType="map">
        SELECT COUNT(1)
        FROM (
        <include refid="BaseSelect"/>
        ) T
    </select>

    <select id="members" parameterType="map"
            resultType="com.career.careerlink.employers.dto.EmployerMemberDto">
        <include refid="BaseSelect"/>
        <include refid="OrderByClause"/>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <update id="approveIfPending" parameterType="map">
        UPDATE employer_users eu
        JOIN employer_users me
        ON me.employer_user_id = #{employerUserId}
            AND me.employer_id      = eu.employer_id
        SET eu.is_approved = 'Y',
            eu.approved_at = CURRENT_TIMESTAMP,
            eu.updated_at  = CURRENT_TIMESTAMP
        WHERE eu.employer_user_id = #{targetEmployerUserId}
            AND eu.is_approved = 'N'
    </update>

    <update id="approveIfPendingBulk" parameterType="map">
        UPDATE employer_users eu
        SET is_approved = 'Y',
        approved_at = CURRENT_TIMESTAMP,
        updated_at  = CURRENT_TIMESTAMP
        WHERE eu.is_approved = 'N'
        AND EXISTS (
        SELECT 1
        FROM employer_users me
        WHERE me.employer_user_id = #{employerUserId}
        AND me.employer_id      = eu.employer_id
        )
        AND eu.employer_user_id IN
        <foreach collection="targetEmployerUserIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>